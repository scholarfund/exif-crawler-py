name: Build and Plan

# Run this workflow only on pushes (including PR merges) to the default branch
on:
  push:
    branches:
      - trunk

jobs:
  # Generate a release tag
  release_tag:
    name: Create Build ID
    runs-on: ubuntu-latest
    outputs:
      release_tag_prefix: ${{ steps.tag.outputs.release_tag_prefix }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: tag
        run: echo "release_tag_prefix=$(date +%s%3N)-$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

  # Build and push a container image
  build_and_push:
    name: Generate Container Image
    needs:
      - release_tag
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - id: gcloud_auth
      uses: google-github-actions/auth@v2
      with:
        token_format: access_token
        workload_identity_provider: projects/407214806170/locations/global/workloadIdentityPools/github-actions/providers/github-actions
        service_account: exif-crawler-ci@tideswell.iam.gserviceaccount.com
        access_token_lifetime: 300s
    - uses: docker/login-action@v3
      with:
        registry: us-west1-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.gcloud_auth.outputs.access_token }}
    - uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: us-west1-docker.pkg.dev/tideswell/docker-default/exif-crawler:${{ needs.release_tag.outputs.release_tag_prefix }}-prod

  # Plan deployment for the production environment
  plan_prod:
    name: Plan Production Deployment
    needs:
      - release_tag
      - build_and_push
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      # Allow this job to create a Git tag as part of the GitHub release process
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: Raku/setup-raku@v1
      - id: gcloud_auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/407214806170/locations/global/workloadIdentityPools/github-actions/providers/github-actions
          service_account: exif-crawler-ci@tideswell.iam.gserviceaccount.com
          access_token_lifetime: 300s
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.1
      - name: Plan
        shell: bash
        run: >-
          rakudo deploy.raku
          --terraform_plan=./terraform/${{ needs.release_tag.outputs.release_tag_prefix }}-prod.tfplan
          ${{ needs.release_tag.outputs.release_tag_prefix }}-prod
      # Create a GitHub Release for this commit, named according to the release tag, and upload
      # the Terraform plan from the previous step. This plan can be downloaded later by an admin
      # to be manually applied. Note that if another plan is applied in the interim, the plan from
      # this workflow will become "stale" and the workflow will need to be re-run to generate a new
      # one
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        shell: bash
        run: >-
          gh release create
          --target=$GITHUB_SHA
          ${{ needs.release_tag.outputs.release_tag_prefix }}-prod
          ./terraform/${{ needs.release_tag.outputs.release_tag_prefix }}-prod.tfplan
